import networkx as nx
import matplotlib.pyplot as plt

from random import choice
from string import ascii_uppercase


def create_random_graph(num_nodes: int):
    G = nx.Graph()
    nodes = []

    while num_nodes > 0:
        node = choice(ascii_uppercase)
        G.add_node(node)
        if len(nodes) > 1:
            G.add_edge(choice(nodes), node)

        nodes.append(node)
        num_nodes -= 1

    nx.draw(G, with_labels=True)
    plt.show()


def create_metro_graph(city: str):
    metro_map = {
        'Kyiv': {
            ("Академмістечко", "Житомирська"): 3,
            ("Житомирська", "Святошин"): 2,
            ("Святошин", "Нивки"): 2,
            ("Нивки", "Берестейська"): 2,
            ("Берестейська", "Шулявська"): 2,
            ("Шулявська", "Політехнічний інститут"): 3,
            ("Політехнічний інститут", "Вокзальна"): 3,
            ("Вокзальна", "Університет"): 2,
            ("Університет", "Театральна"): 2,
            ("Театральна", "Хрещатик"): 1,
            ("Хрещатик", "Арсенальна"): 2,
            ("Арсенальна", "Дніпро"): 2,
            ("Дніпро", "Гідропарк"): 3,
            ("Гідропарк", "Лівобережна"): 3,
            ("Лівобережна", "Дарниця"): 2,
            ("Дарниця", "Чернігівська"): 2,
            ("Чернігівська", "Лісова"): 3,

            ("Героїв Дніпра", "Мінська"): 3,
            ("Мінська", "Оболонь"): 2,
            ("Оболонь", "Почайна"): 3,
            ("Почайна", "Тараса Шевченка"): 2,
            ("Тараса Шевченка", "Контрактова площа"): 2,
            ("Контрактова площа", "Поштова площа"): 2,
            ("Поштова площа", "Майдан Незалежності"): 2,
            ("Майдан Незалежності", "пл. Українських Героїв"): 1,
            ("пл. Українських Героїв", "Олімпійська"): 2,
            ("Олімпійська", "Палац Україна"): 3,
            ("Палац Україна", "Либідська"): 2,
            ("Либідська", "Деміївська"): 2,
            ("Деміївська", "Голосіївська"): 2,
            ("Голосіївська", "Васильківська"): 3,
            ("Васильківська", "Виставковий центр"): 2,
            ("Виставковий центр", "Іподром"): 3,
            ("Іподром", "Теремки"): 2,

            ("Сирець", "Дорогожичі"): 3,
            ("Дорогожичі", "Лук’янівська"): 3,
            ("Лук’янівська", "Золоті ворота"): 3,
            ("Золоті ворота", "Палац Спорту"): 2,
            ("Палац Спорту", "Кловська"): 1,
            ("Кловська", "Печерська"): 2,
            ("Печерська", "Дружби народів"): 2,
            ("Дружби народів", "Видубичі"): 2,
            ("Видубичі", "Славутич"): 3,
            ("Славутич", "Осокорки"): 2,
            ("Осокорки", "Позняки"): 2,
            ("Позняки", "Харківська"): 3,
            ("Харківська", "Вирлиця"): 2,
            ("Вирлиця", "Бориспільська"): 3,
            ("Бориспільська", "Червоний хутір"): 2,

            ("Хрещатик", "Майдан Незалежності"): 0,
            ("Театральна", "Золоті ворота"): 0,
            ("пл. Українських Героїв", "Палац Спорту"): 0
        },
        'Dnipro': {
            ("Покровська", "Проспект Свободи"): 2,
            ("Проспект Свободи", "Заводська"): 2,
            ("Заводська", "Метробудівників"): 3,
            ("Метробудівників", "Металургів"): 2,
            ("Металургів", "Вокзальна"): 3,
            ("Вокзальна", "Театральна"): 2,
            ("Театральна", "Центральна"): 2,
            ("Центральна", "Музейна"): 3,
            ("Музейна", "Площа Героїв Майдану"): 2,
            ("Площа Героїв Майдану", "Воскресенська"): 3,
            ("Воскресенська", "Кам’янська"): 2
        },
        'Kharkiv': {
            ("Салтівська", "Студентська"): 3,
            ("Студентська", "Академіка Павлова"): 2,
            ("Академіка Павлова", "Академіка Барабашова"): 2,
            ("Академіка Барабашова", "Київська"): 2,
            ("Київська", "Ярослава мудрого"): 2,
            ("Ярослава мудрого", "Університет"): 2,
            ("Університет", "Пушкінська"): 3,
            ("Пушкінська", "Історичний музей"): 2,

            ("Холодна гора", "Південний вокзал"): 3,
            ("Південний вокзал", "Центральний ринок"): 2,
            ("Центральний ринок", "Майдан Конституції"): 2,
            ("Майдан Конституції", "Левада"): 1,
            ("Левада", "Спортивна"): 1,
            ("Спортивна", "Заводська"): 2,
            ("Заводська", "Турбоатом"): 2,
            ("Турбоатом", "Палац спорту"): 2,
            ("Палац спорту", "Армійська"): 2,
            ("Армійська", "Імені Олександра Масельського"): 3,
            ("Імені Олександра Масельського", "Тракторний завод"): 2,
            ("Тракторний завод", "Пролетарська"): 2,
            ("Пролетарська", "Індустріальна"): 3,

            ("Перемога", "Олексіївська"): 3,
            ("Олексіївська", "23 серпня"): 2,
            ("23 серпня", "Ботанічний сад"): 2,
            ("Ботанічний сад", "Наукова"): 3,
            ("Наукова", "Держпром"): 2,
            ("Держпром", "Архітектора Бекетова"): 2,
            ("Архітектора Бекетова", "Захисників України"): 4,
            ("Захисників України", "Метробудівників"): 1,

            ("Метробудівників", "Спортивна"): 0,
            ("Історичний музей", "Майдан Конституції"): 0,
            ("Держпром", "Університет"): 0,

    }, 'Lviv': {}
    }

    try:
        G = nx.Graph()

        for k, v in metro_map[city].items():
            G.add_edge(k[0], k[1], weight=v)

        nx.draw(G, with_labels=True)
        plt.show()

    except KeyError:
        print(f'{city} is not supported. Available options are "Kyiv", "Dnipro", "Kharkiv", "Lviv"')

if __name__ == "__main__":
    input_value = input("Enter city name for metro map graph or a number to generate a random graph: ")
    if input_value.isnumeric():
        create_random_graph(int(input_value))

    else:
        create_metro_graph(input_value)


def example_func():
    G = nx.Graph()  # неорієнтований граф

    G.add_node("A")  # Добав вершину
    G.add_nodes_from(["B", "C", "D"])  # Добав вершини
    # G.add_edge("A", "B") # Добав ребро
    G.add_edges_from([("A", "C"), ("B", "C"), ("B", "D")])  # Добав ребра
    # G.remove_node("A")
    # G.remove_nodes_from(["B", "C", "D"])
    # G.remove_edge("A", "B")
    # G.remove_edges_from([("A", "C"), ("B", "C"), ("B", "D")])
    print(G.nodes())  # ['A', 'B', 'C', 'D']
    print(G.edges())  # [('A', 'C'), ('B', 'C'), ('B', 'D')]
    print(nx.is_connected(G))

    nx.draw(G, with_labels=True)
    plt.show()

    DG = nx.DiGraph()  # орієнтований граф
    G = nx.Graph()
    G.add_edges_from([("A", "B"), ("B", "C")])
    DG = nx.DiGraph(G)
    nx.draw(DG, with_labels=True)
    plt.show()

    G = nx.complete_graph(8)  # створення повного графа
    nx.draw(G, with_labels=True)
    plt.show()

    G = nx.complete_graph(4)
    options = {
        "node_color": "yellow",
        "edge_color": "lightblue",
        "node_size": 500,
        "width": 3,
        "with_labels": True
    }
    nx.draw(G, **options)
    plt.show()

    G = nx.complete_graph(8)
    pos = nx.circular_layout(G)  # Кругове формування
    nx.draw(G, pos, with_labels=True)
    plt.title("Circular Layout")
    plt.show()

    G = nx.complete_graph(8)
    pos = nx.random_layout(G)  # Випадкове формування
    nx.draw(G, pos, with_labels=True)
    plt.title("Random Layout")
    plt.show()

    G = nx.complete_graph(8)
    pos = [[0, 1, 2], [3, 4], [5, 6, 7]]  # Вказує камери для розташування вершин у вигляді відносних кіл
    pos = nx.shell_layout(G, pos)
    nx.draw(G, pos, with_labels=True)
    plt.title("Shell Layout")
    plt.show()

    # Створення графа
    G = nx.Graph()

    # Додавання міст і доріг
    G.add_edge('A', 'B', weight=5)
    G.add_edge('A', 'C', weight=10)
    G.add_edge('B', 'D', weight=3)
    G.add_edge('C', 'D', weight=2)
    G.add_edge('D', 'E', weight=4)

    # Візуалізація графа
    pos = nx.spring_layout(G, seed=42)
    nx.draw(G, pos, with_labels=True, node_size=700, node_color="skyblue", font_size=15, width=2)
    labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)

    plt.show()

    # Створення графа
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }

    G = nx.Graph(graph)

    # DFS
    dfs_tree = nx.dfs_tree(G, source='A')
    print(list(dfs_tree.edges()))  # виведе ребра DFS-дерева з коренем у вузлі A
    print(list(dfs_tree.nodes()))  # виведе вузли DFS-дерева з коренем у вузлі A
    # BFS
    bfs_tree = nx.bfs_tree(G, source='A')
    print(list(bfs_tree.edges()))  # виведе ребра BFS-дерева з коренем у вузлі A
    print(list(bfs_tree.nodes()))  # виведе вузли BFS-дерева з коренем у вузлі A
